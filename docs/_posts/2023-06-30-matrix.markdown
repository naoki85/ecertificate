---
layout: post
title:  "行列"
date:   2023-07-01 10:47:00 +0900
categories: matrix
---

# 転置行列

[転置行列](https://ja.wikipedia.org/wiki/転置行列)

## 転置行列とは

転置行列とは、行列の行と列を入れ替えて作られる新しい行列のことを指します。
例えば、以下のような行列 A があったとします。

```
A = [[1, 2, 3],
     [4, 5, 6]]
```

この行列 A の転置行列は、以下のようになります。

```
A^T = [[1, 4],
       [2, 5],
       [3, 6]]
```

2次元の転置行列の場合、行列 A の行と列が入れ替わり、2 行 3 列の行列が 3 行 2 列の行列に変換されます。以下の式で表されます。

```
[A_ij]^T = [A_ji]
```

転置行列は、転置された行列と元の行列の内積が計算される場合などによく使用されます。

### 2次元の転置行列

2次元の転置行列は、以下のようになります。

```
B = [[1, 2],
     [3, 4]]

B^T = [[1, 3],
       [2, 4]]
```

2次元の転置行列の場合、行列 B の行と列が入れ替わり、2 行 2 列の行列が 2 行 2 列の行列に変換されます。

```
[B_ij]^T = [B_ji]
```

# 逆行列

[正則行列](https://ja.wikipedia.org/wiki/逆行列)

逆行列とは、`正方行列A`に対して、 A と `逆行列` をかけた結果が `単位行列I` となる行列のことを指します。つまり、以下の式が成り立ちます。

```
A * A^-1 = I
```

ただし、逆行列は、正方行列に限られます。
また、正方行列に逆行列が存在するには、行列式が0でなければなりません。

# 直交行列

[直交行列](https://ja.wikipedia.org/wiki/%E7%9B%B4%E4%BA%A4%E8%A1%8C%E5%88%97)とは、行列の転置行列が逆行列に等しい正方行列のことです。つまり、以下の式が成り立ちます。

```
A^T * A = A * A^T = I
```

ここで、Iは単位行列です。直交行列は、列ベクトルどうしの内積が0でなく、長さが1であるような行列です。つまり、直交行列の列ベクトルは互いに直交し、長さが1であることが特徴です。
直交行列は、回転行列や正規直交基底などの概念で使用されます。また、直交行列は、行列の対角化や、線形代数の応用分野で使用されます。

## 直交行列の性質

直交行列には、以下のような性質があります。

- 直交行列の行ベクトルは互いに直交しています。
- 直交行列の列ベクトルは互いに直交しています。
- 直交行列の転置行列は、逆行列に等しいです。
- 直交行列の行列式の絶対値は1です。

# 対角行列

[対角行列](https://ja.wikipedia.org/wiki/%E5%AF%BE%E8%A7%92%E8%A1%8C%E5%88%97)とは、対角成分以外の成分がすべて0である行列です。すなわち、以下のように表されます。

```
A = [[a11, 0, ..., 0],
     [0, a22, ..., 0],
     ...,
     [0, 0, ..., ann]]
```

対角行列は、行列の対角成分に関する情報をまとめたものです。対角行列の逆行列は、各対角成分の逆数を対角成分とする行列です。
対角行列は、行列の対角化や、行列の固有値・固有ベクトルの計算に使用されます。また、対角行列は、線形代数の応用分野で使用されます。

## 対角化

[対角化](https://ja.wikipedia.org/wiki/%E5%AF%BE%E8%A7%92%E5%8C%96)とは、正方行列を対角行列に変換することです。つまり、以下のような式が成り立ちます。

```
A = P * D * P^-1
```

ここで、Pは正則行列であり、Dは対角行列です。Pの列ベクトルは、Aの固有ベクトルを並べたものであり、Dの対角成分は、Aの固有値を並べたものです。
対角化によって、行列の性質を分析することができます。また、対角化によって、線形代数の問題を簡単に解決することができます。

# 行列式

[行列式](https://ja.wikipedia.org/wiki/行列式)

行列式とは、正方行列に対して定義される数値のことを指します。行列式は、行列の特徴を表す指標として使用されます。

## 行列式の求め方

2次元の正方行列の行列式は以下のように定義されます。

```
det(A) = a11 * a22 - a12 * a21
```

3次元の正方行列の行列式は以下のように定義されます。

```
det(A) = a11 * a22 * a33 + a12 * a23 * a31 + a13 * a21 * a32 - a11 * a23 * a32 - a12 * a21 * a33 - a13 * a22 * a31
```

一般に、n次元の正方行列Aに対して、行列式は以下のように定義されます。

```
det(A) = Σ(−1)^i+j * aij * det(A_ij)
```

ここで、A_ijは、Aのi行とj列を除いた(n-1)次元の正方行列で、det(A_ij)はその行列式を表します。また、i+jが奇数の場合はマイナス符号が付きます。
行列式を求めるためには、掃き出し法などのアルゴリズムを使用する方法があります。また、行列式は、逆行列や固有値分解の計算に使用されることがあります。

## 行列式の性質

行列式には、以下のような性質があります。

- 行列の転置に対して、行列式は変わりません。
- 行列の2行または2列を交換すると、行列式は符号が反転します。
- 行列の1行または1列に、別の行列の定数倍を加えると、行列式は変化しません。
- 行列の1行または1列を定数倍すると、行列式も同じ倍数になります。
- 行列の行または列が線形従属である場合、行列式は0になります。

行列式は、行列の特徴を表す指標として使用されます。

# 行列の特異値分解

[特異値分解](https://ja.wikipedia.org/wiki/特異値分解)

特異値分解とは、行列を3つの行列の積の形に分解することです。正方行列に限らず、任意のm×n行列に対して行うことができます。行列Aが以下のように与えられたとします。

```
A = [[a11, a12, a13],
     [a21, a22, a23]]
```

この行列の特異値分解は以下のように表されます。

```
A = U * Σ * V^T
```

ここで、Uはm×mの**直交行列**、Σはm×nの**対角行列**、Vはn×nの**直交行列**です。Σの対角成分は特異値と呼ばれます。特異値は、**行列Aの固有値の平方根**として求めることができます。
特異値を大きい順に $(i, i)$ に並べると U ができます。
特異値分解は、行列のランクや条件数を分析するのに役立ちます。特に、疎行列の圧縮や画像処理などの応用分野で使用されます。

## 特異値分解の例

[【線形代数】特異値分解とは?例題付きで分かりやすく解説!! | 機械学習ナビ](https://nisshingeppo.com/ai/singular-value-decomposition/)

以下の行列Aの特異値分解を求めてみましょう。

```
A = [[3, 1, 1],
     [1, 3, 1]]
```

まず、行列Aの固有値を求めます。

```
det(A - λI) = 0
(3-λ) * (3-λ) - 1 * 1 = 0
λ^2 - 6λ + 8 = 0
λ1 = 2, λ2 = 4
```

次に、固有値から特異値を求めます。

```
σ1 = sqrt(λ1) = sqrt(2)
σ2 = sqrt(λ2) = 2
```

特異値を対角成分とした対角行列Σを作成します。

```
Σ = [[sqrt(2), 0, 0],
     [0, 2, 0]]
```

固有ベクトルから直交行列Uを作成します。

```
(A - λ1I) * v1 = 0
[[1, 1],
 [1, 1]] * [[-1],
             [1]]
= [[0],
   [0]]
v1 = [1/sqrt(2), -1/sqrt(2)]

(A - λ2I) * v2 = 0
[[1, 1],
 [1, 1]] * [[1],
             [1]]
= [[2],
   [2]]
v2 = [1/sqrt(2), 1/sqrt(2)]

U = [[1/sqrt(2), 1/sqrt(2)],
     [-1/sqrt(2), 1/sqrt(2)]]
```

固有ベクトルから直交行列Vを作成します。

```
(A^T - λ1I) * u1 = 0
[[1, 1],
 [1, 1]] * [[-1/sqrt(2)],
             [1/sqrt(2)]]
= [[0],
   [0]]
u1 = [1/sqrt(2), 1/sqrt(2)]

(A^T - λ2I) * u2 = 0
[[1, 1],
 [1, 1]] * [[1/sqrt(2)],
             [-1/sqrt(2)]]
= [[0],
   [0]]
u2 = [1/sqrt(2), -1/sqrt(2)]

V = [[1/sqrt(2), -1/sqrt(2)],
     [1/sqrt(2), 1/sqrt(2)]]
```

これらの値を代入して特異値分解を行います。

```
A = U * Σ * V^T
  = [[1/sqrt(2), 1/sqrt(2)],
     [-1/sqrt(2), 1/sqrt(2)]] *
    [[sqrt(2), 0, 0],
     [0, 2, 0]] *
    [[1/sqrt(2), -1/sqrt(2)],
     [1/sqrt(2), 1/sqrt(2)]]^T
  = [[1, 1],
     [1, 3],
     [1, 1]]
```

# ノルム

[ノルム](https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%AB%E3%83%A0_(%E6%95%B0%E5%AD%A6))とは、ベクトル空間上で定義される、ベクトルの大きさ（長さ）を表す関数です。ノルムは、ベクトルの性質を表す指標として使用されます。

## L1ノルム

[L1ノルム](https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%AB%E3%83%A0_(%E6%95%B0%E5%AD%A6)#L1_%E3%83%8E%E3%83%AB%E3%83%A0)は、ベクトルの各成分の絶対値の和を表します。つまり、以下のような式で表されます。

```
||x||_1 = |x1| + |x2| + ... + |xn|
```

L1ノルムは、ベクトルの各成分が等しい場合に、ベクトルの大きさが最大になります。また、L1ノルムは、ベクトルに含まれる成分の絶対値が重要な場合に使用されます。例えば、画像処理において、輝度変換やエッジ検出などに使用されます。

## L2ノルム

[L2ノルム](https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%AB%E3%83%A0_(%E6%95%B0%E5%AD%A6)#L2_%E3%83%8E%E3%83%AB%E3%83%A0)は、ベクトルの各成分の二乗和の平方根を表します。つまり、以下のような式で表されます。

```
||x||_2 = sqrt(x1^2 + x2^2 + ... + xn^2)
```

L2ノルムは、ユークリッド距離と呼ばれる距離の概念と関連があります。L2ノルムは、ベクトルの大きさが重要な場合に使用されます。例えば、機械学習において、ベクトルの正規化や距離の計算に使用されます。

## 最大値ノルム

[最大値ノルム](https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%AB%E3%83%A0_(%E6%95%B0%E5%AD%A6)#L%E2%88%9E_%E3%83%8E%E3%83%AB%E3%83%A0)は、ベクトルの各成分の絶対値の最大値を表します。つまり、以下のような式で表されます。

```
||x||_∞ = max(|x1|, |x2|, ..., |xn|)
```

最大値ノルムは、ベクトルの最大値が重要な場合に使用されます。例えば、制御工学において、システムの最大値や最小値の制御に使用されます。

# L1ノルム、L2ノルム、最大値ノルムの比較

L1ノルム、L2ノルム、最大値ノルムは、それぞれ異なるベクトルの性質を表します。例えば、以下のような特徴があります。

- L1ノルムは、ベクトルの各成分の絶対値の和を表すため、外れ値の影響を受けにくいという特徴があります。また、L1ノルムを最小化することによって、スパースな解を得ることができます。
- L2ノルムは、ベクトルの各成分の二乗和の平方根を表すため、外れ値の影響を受けやすいという特徴があります。また、L2ノルムを最小化することによって、正則化項を導入することができます。
- 最大値ノルムは、ベクトルの各成分の絶対値の最大値を表すため、最大値が重要な場合に使用されます。また、最大値ノルムを最小化することによって、最大値を制限することができます。

以上のように、L1ノルム、L2ノルム、最大値ノルムは、それぞれ異なる特徴を持ちます。適切なノルムを選択することによって、問題に応じた解析や最適化を行うことができます。

# 距離の種類

距離とは、2つのベクトル間の距離を表す指標のことです。距離は、機械学習や統計解析などの分野で使用されます。ここでは、代表的な距離の種類について説明します。

## ユークリッド距離

[ユークリッド距離](https://ja.wikipedia.org/wiki/%E3%83%A6%E3%83%BC%E3%82%AF%E3%83%AA%E3%83%83%E3%83%89%E8%B7%9D%E9%9B%A2)とは、2つのベクトル間の直線距離を表す指標のことです。つまり、以下のような式で表されます。

```
d(x, y) = sqrt((x1 - y1)^2 + (x2 - y2)^2 + ... + (xn - yn)^2)
```

ユークリッド距離は、ベクトルの大きさが重要な場合に使用されます。例えば、PCA（主成分分析）やクラスタリングなどの応用分野で使用されます。

## ハミング距離

[ハミング距離](https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%9F%E3%83%B3%E3%82%B0%E8%B7%9D%E9%9B%A2)とは、2つのベクトル間の差異の数を表す指標のことです。つまり、以下のような式で表されます。

```
d(x, y) = x1 ⊕ y1 + x2 ⊕ y2 + ... + xn ⊕ yn
```

ここで、⊕はXOR（排他的論理和）を表します。ハミング距離は、ベクトルの差異が重要な場合に使用されます。例えば、誤り検出・訂正や、機械学習の分類問題などに使用されます。

## マハラノビス距離

[マハラノビス距離](https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%8F%E3%83%A9%E3%83%8E%E3%83%93%E3%82%B9%E8%B7%9D%E9%9B%A2)とは、2つのベクトル間の距離を、ベクトルの分散共分散行列に基づいて計算する指標のことです。つまり、以下のような式で表されます。

$$
d(x, y) = \sqrt{(x - y)^T S^{-1} (x - y)}
$$

ここで、Sはベクトルの分散共分散行列を表します。マハラノビス距離は、分散共分散行列が重要な場合に使用されます。例えば、クラスタリングや異常検知などの応用分野で使用されます。

## マンハッタン距離

[マンハッタン距離](https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%B3%E3%83%8F%E3%83%83%E3%82%BF%E3%83%B3%E8%B7%9D%E9%9B%A2)とは、2つのベクトル間の差異を、各成分の絶対値の和で表す指標の

```
d(x, y) = x1 ⊕ y1 + x2 ⊕ y2 + ... + xn ⊕ yn
```

ここで、⊕はXOR（排他的論理和）を表します。ハミング距離は、ベクトルの差異が重要な場合に使用されます。例えば、誤り検出・訂正や、機械学習の分類問題などに使用されます。